generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope        String?
  idToken      String?
  expiresAt    DateTime? @db.Date
  password     String?
  createdAt    DateTime? @db.Date
  updatedAt    DateTime? @db.Date
  user         user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id        String   @id
  expiresAt DateTime @db.Date
  ipAddress String?
  userAgent String?
  userId    String
  token     String?
  createdAt DateTime? @db.Date
  updatedAt DateTime? @db.Date
  user      user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  state         String?
  createdAt     DateTime  @db.Date
  updatedAt     DateTime  @db.Date
  property      property[]
  account       account[]
  session       session[]
  tenants       tenant[]

}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Date
  createdAt  DateTime? @db.Date
  updatedAt  DateTime? @db.Date
}

model property {
  id String @id
  address String
  city String
  country String
  postalCode String
  state String
  title String
  images String[]
  userId String
  user         user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenants      tenant[]
  rentReceipt  rentReceipt[]
  channels     channel[]

  rentReceiptStartDate DateTime?

  // Rental information
  rentDetails Json? // { baseRent: number, charges: number }
  currency    String? @default("EUR")
  paymentFrequency String @default("monthly") // "biweekly" | "monthly" | "quarterly" | "yearly"
  depositAmount Float?
  rentedSince DateTime?
  isFurnished Boolean @default(false)

  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt @default(now())
}

model rentReceipt {
  // we duplicate some of the property data, since the property data might be modified by the user later on
  id String @id @default(cuid())
  startDate DateTime
  endDate DateTime
  baseRent Float
  charges Float
  paymentFrequency String // "biweekly" | "monthly" | "quarterly" | "yearly"
  propertyId String
  tenantId String
  status RentReceiptStatus @default(PENDING)

  blobUrl String?

  property property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant   tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @default(now())
}

enum RentReceiptStatus {
  DRAFT
  PENDING
  PAID
  LATE
  UNPAID
  CANCELLED
}

model tenant {
  id          String    @id @default(cuid())
  firstName   String    @default("John")
  lastName    String
  email       String
  phoneNumber String
  userId      String
  propertyId  String?
  notes       String?
  startDate   DateTime?
  endDate     DateTime?
  
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property    property? @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentReceipt rentReceipt[]
  auth        tenantAuth?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model tenantAuth {
  id          String    @id @default(cuid())
  tenantId    String    @unique
  phoneNumber String    @unique
  passcode    String    // Hashed 6-digit passcode
  tempCode    String?   // Temporary access code for first login
  tempCodeExpiresAt DateTime?
  isActivated Boolean   @default(false)
  tenant     tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // For handling authentication sessions
  refreshToken String?
  refreshTokenExpiresAt DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model channel {
  id          String    @id @default(cuid())
  propertyId  String
  name        String?   // Optional custom name for the channel
  type        ChannelType @default(PROPERTY)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  property    property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  messages    Message[]
  participants channelParticipant[]

  @@index([propertyId])
}

model channelParticipant {
  id          String    @id @default(cuid())
  channelId   String
  participantId String  // Can be either userId (landlord) or tenantId
  participantType ParticipantType
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  
  channel     channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([channelId, participantId])
  @@index([participantId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  channelId   String
  senderId    String    // Can be either userId (landlord) or tenantId
  senderType  ParticipantType
  createdAt   DateTime  @default(now())
  
  channel     channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([senderId])
}

enum ChannelType {
  PROPERTY    // Default channel for property-wide communication
  MAINTENANCE // Specific channel for maintenance issues
  PAYMENT     // Specific channel for payment discussions
  CUSTOM      // For any custom channels you might want to create
}

enum ParticipantType {
  LANDLORD
  TENANT
}
