generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime? @db.Date
  password              String?
  accessTokenExpiresAt  DateTime?
  createdAt             DateTime? @db.Date
  refreshTokenExpiresAt DateTime?
  scope                 String?
  updatedAt             DateTime? @db.Date
  user                  user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model session {
  id        String    @id
  expiresAt DateTime  @db.Date
  ipAddress String?
  userAgent String?
  userId    String
  createdAt DateTime? @db.Date
  token     String?
  updatedAt DateTime? @db.Date
  user      user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id               String     @id
  name             String
  email            String     @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime   @db.Date
  updatedAt        DateTime   @db.Date
  address          String?
  city             String?
  country          String?
  postalCode       String?
  state            String?
  stripeCustomerId String?
  account          account[]
  property         property[]
  session          session[]
  tenants          tenant[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Date
  createdAt  DateTime? @db.Date
  updatedAt  DateTime? @db.Date
}

model property {
  id                   String        @id
  address              String
  city                 String
  country              String
  postalCode           String
  state                String
  title                String
  images               String[]
  userId               String
  createdAt            DateTime?     @default(now())
  currency             String?       @default("EUR")
  depositAmount        Float?
  isFurnished          Boolean       @default(false)
  paymentFrequency     String        @default("monthly")
  rentDetails          Json?
  rentedSince          DateTime?
  updatedAt            DateTime?     @default(now()) @updatedAt
  rentReceiptStartDate DateTime?
  channels             channel[]
  documents            document[]
  user                 user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentReceipt          rentReceipt[]
  tenants              tenant[]
}

model rentReceipt {
  id               String            @id @default(cuid())
  startDate        DateTime
  endDate          DateTime
  paymentFrequency String
  propertyId       String
  tenantId         String
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @default(now()) @updatedAt
  baseRent         Float
  charges          Float
  blobUrl          String?
  status           RentReceiptStatus @default(PENDING)
  property         property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant           tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model tenant {
  id          String        @id @default(cuid())
  lastName    String
  email       String
  phoneNumber String
  propertyId  String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  firstName   String        @default("John")
  endDate     DateTime?
  startDate   DateTime?
  rentReceipt rentReceipt[]
  property    property?     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  auth        tenantAuth?
}

model tenantAuth {
  id                    String    @id @default(cuid())
  tenantId              String    @unique
  phoneNumber           String    @unique
  passcode              String
  tempCode              String?
  tempCodeExpiresAt     DateTime?
  isActivated           Boolean   @default(false)
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  biometricEnabled      Boolean   @default(false)
  biometricPublicKey    String?
  tenant                tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([phoneNumber])
}

model channel {
  id           String               @id @default(cuid())
  propertyId   String
  name         String?
  type         ChannelType          @default(PROPERTY)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  messages     Message[]
  property     property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  participants channelParticipant[]

  @@index([propertyId])
}

model channelParticipant {
  id              String          @id @default(cuid())
  channelId       String
  participantId   String
  participantType ParticipantType
  joinedAt        DateTime        @default(now())
  leftAt          DateTime?
  channel         channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([channelId, participantId])
  @@index([participantId])
}

model Message {
  id         String          @id @default(cuid())
  content    String
  channelId  String
  senderId   String
  senderType ParticipantType
  createdAt  DateTime        @default(now())
  channel    channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([senderId])
}

model document {
  id               String           @id @default(cuid())
  name             String
  description      String?
  fileUrl          String
  fileType         String
  fileSize         Int
  category         DocumentCategory
  propertyId       String
  uploadedAt       DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sharedWithTenant Boolean          @default(false)
  property         property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}

model subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime? @db.Timestamp(6)
  periodEnd            DateTime? @db.Timestamp(6)
  cancelAtPeriodEnd    Boolean?
  seats                Int?
}

enum RentReceiptStatus {
  PENDING
  PAID
  LATE
  UNPAID
  CANCELLED
  DRAFT
}

enum ChannelType {
  PROPERTY
  MAINTENANCE
  PAYMENT
  CUSTOM
}

enum ParticipantType {
  LANDLORD
  TENANT
}

enum DocumentCategory {
  LEASE
  INVENTORY
  INSURANCE
  MAINTENANCE
  PAYMENT
  CORRESPONDENCE
  LEGAL
  UTILITY
  OTHER
}
